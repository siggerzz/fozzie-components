# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Fozzie Components CI

on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
    paths-ignore:
      - ".husky/**"
      - "stories/**"
      - ".vscode/**"
      - "README.md"
      - "CONTRIBUTING.md"
      - "CHANGELOG.md"
      - "LICENSE"
  push:
    branches:
      - master

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      # Checkout the Repo.
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node
        # Setup Node 16.
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"
      # Restore node_modules if cache exists. If not, cache is created at end of build.
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: node-modules-${{ hashFiles('**/yarn.lock') }}
      # Run 'yarn' if cache doesn't exist. Use --prefer-offline to download packages from yarn cache folder where possible.
      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn --prefer-offline

  # danger:
  #   if: ${{ github.ref != 'refs/heads/master' }}
  #   needs: install
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Checkout the Repo.
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Setup Node
  #       # Setup Node 16.
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #         cache: "yarn"
  #     # Restore node_modules if cache exists. If not, cache is created at end of build.
  #     - name: Cache Node Modules
  #       id: cache-node-modules
  #       uses: actions/cache@v2
  #       with:
  #         path: "**/node_modules"
  #         key: node-modules-${{ hashFiles('**/yarn.lock') }}
  #     # Run Danger Checks.
  #     - name: Run Danger Checks
  #       run: yarn danger ci --failOnErrors
  #       env:
  #         DANGER_GITHUB_API_TOKEN: ${{ secrets.DANGER_GITHUB_API_TOKEN }}

  build:
    needs: install
    runs-on: ubuntu-latest
    steps:
      # Checkout the Repo.
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # Detect changed files.
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            global:
              - '*.js'
              - '*.json'
              - '.github/workflows/**'
              - 'packages/storybook/**'
              - 'packages/tools/fozzie/**'
          list-files: shell
      # Setup Node 16.
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"
      # Restore node_modules - Cache should exist as one was created in previous 'install' job.
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: node-modules-${{ hashFiles('**/yarn.lock') }}
      # Restore Turborepo's component 'dist' cache - If not, cache is created at end of build.
      - name: Cache Turborepo Dist
        id: turborepo-dist-cache
        uses: actions/cache@v2
        with:
          path: .turbo
          key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.run_id }}
          # Use one of the following keys if the above is not found.
          restore-keys: |
            turborepo-dist-cache-${{ github.ref_name }}
            turborepo-dist-cache-master
      # Build components. Only components with out-of-date Turborepo hash will rebuilt, speeding up build time.
      - name: Build Components
        run: yarn build --cache-dir=".turbo"
      # Run Bundlewatch checks
      - name: Run Bundlewatch checks
        run: yarn bundlewatch
      # Lint all components if 'master' or root-level changes.
      - name: Lint All Components
        if: steps.changes.outputs.global == 'true' || github.ref == 'refs/heads/master'
        run: yarn lint --concurrency=10 --cache-dir=".turbo"
      # Lint changed components if no root-level changes and not master.
      - name: Lint Changed Components
        if: steps.changes.outputs.global == 'false' && github.ref != 'refs/heads/master'
        run: yarn lint --filter=[origin/master] --concurrency=10 --cache-dir=".turbo"
      # Cache 'storybook-static'
      - name: Cache Storybook Static Directory
        id: storybook-cache
        uses: actions/cache@v2
        with:
          path: ./packages/storybook/storybook-static
          key: storybook-cache-${{ github.ref_name }}-${{ github.run_id }}
      # Build Storybook with all components if 'master' or root-level changes
      - name: Build Storybook (All Components)
        if: steps.changes.outputs.global == 'true' || github.ref == 'refs/heads/master'
        run: yarn storybook:build
      # Build Storybook with changed components + dependants if no root-level changes and not master.
      - name: Build Storybook (Changed Components + Dependants)
        if: steps.changes.outputs.global == 'false' &&  github.ref != 'refs/heads/master'
        run: yarn storybook:build-changed
    env:
      BUNDLEWATCH_GITHUB_TOKEN: ${{ secrets.BUNDLEWATCH_TOKEN }}

  storybook-deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      # Checkout the Repo.
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # Setup Node 16.
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"
      # Restore node_modules - Cache should exist as one was created in previous 'install' job.
      - name: Restore Cache -  Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: node-modules-${{ hashFiles('**/yarn.lock') }}
      # Run 'yarn' if cache doesn't exist. Use --prefer-offline to download packages from yarn cache folder where possible.
      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn --prefer-offline
      # Restore Cache - Turborepo Dist.
      - name: Cache Turborepo Dist
        id: turborepo-dist-cache
        uses: actions/cache@v2
        with:
          path: .turbo
          key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.run_id }}
      # Restore Storybook 'storybook-static'.
      - name: Cache Storybook Static Directory
        id: storybook-cache
        uses: actions/cache@v2
        with:
          path: ./packages/storybook/storybook-static
          key: storybook-cache-${{ github.ref_name }}-${{ github.run_id }}
      - name: Archive build output
        run: "tar --dereference --directory packages/storybook/storybook-static -cvf artifact.tar ."
      # Upload Storybook Artifact.
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: github-pages
          path: artifact.tar
      # Deploy Storybook.
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
        with:
          preview: true

  # publish:
  #   needs: tests
  #   runs-on: ubuntu-latest
  #   if: ${{ github.ref == 'refs/heads/master' }}
  #   steps:
  #     # Checkout the Repo.
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     # Setup Node 16.
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #         cache: 'yarn'
  #     # Restore node_modules - Cache should exist as one was created in previous 'install' job.
  #     - name: Restore Cache -  Node Modules
  #       id: cache-node-modules
  #       uses: actions/cache@v2
  #       with:
  #         path: '**/node_modules'
  #         key: node-modules-${{ hashFiles('**/yarn.lock') }}
  #     # Restore Cache - Turborepo Dist.
  #     - name: Cache Turborepo Dist
  #       id: turborepo-dist-cache
  #       uses: actions/cache@v2
  #       with:
  #         path: .turbo
  #         key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.run_id }}
  #     - run: yarn build --cache-dir=".turbo"
  #     # Prevent NPM publishes until we've fully migrated away from CircleCI.
  #     - name: Auth with NPM
  #       run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
  #     - name: Publish unreleased package versions to npm
  #       run: yarn lerna publish from-package --ignore-scripts --yes
